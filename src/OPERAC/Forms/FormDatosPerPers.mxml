<?xml version="1.0" encoding="utf-8"?>
<mx:Form xmlns:mx="http://www.adobe.com/2006/mxml" width="430" height="480" creationPolicy="all" 
	horizontalScrollPolicy="off" verticalScrollPolicy="off">
	<mx:states>
		<mx:State name="moral">
			<mx:SetProperty name="width" value="510"/>
			<mx:SetProperty name="height" value="420"/>
			<mx:RemoveChild target="{txtSegNombre}"/>
			<mx:RemoveChild target="{AP}"/>
			<mx:RemoveChild target="{AM}"/>
			<mx:RemoveChild target="{genero}"/>
			<mx:RemoveChild target="{entidad}"/>
			<mx:RemoveChild target="{pais}"/>
			<mx:RemoveChild target="{curp}"/>
			<mx:RemoveChild target="{ife}"/>
			<mx:SetProperty target="{txtCodigo}" name="width" value="100"/>
			<mx:RemoveChild target="{rfc}"/>
			<mx:AddChild relativeTo="{nombre}" position="before" target="{rfc}"/>
			<mx:SetProperty target="{nombre}" name="label" value="Denominación o Razón Social:"/>
			<mx:SetProperty target="{nombre}" name="width" value="464"/>
			<mx:SetProperty target="{fecha}" name="width" value="370"/>
			<mx:SetProperty target="{fecha}" name="label" value="Fecha Constitución:"/>
			<mx:SetProperty target="{txtNombre}" name="width" value="290"/>
			<mx:SetProperty target="{txtNombre}" name="restrict" value="A-Z;a-z;Ñ;ñ;0-9; "/>
			<mx:SetProperty target="{txtRfc}" name="editable" value="true"/>
			<mx:AddChild relativeTo="{nombre}" position="after">
				<mx:FormItem label="Régimen Capital:" id="figura" visible="true" width="465">
					<mx:Canvas>
						<mx:ComboBox id="cboFigura" labelField="nombre" width="290"/>
					</mx:Canvas>
				</mx:FormItem>
			</mx:AddChild>
			<mx:AddChild relativeTo="{figura}" position="after">
				<mx:FormItem label="Nombre Comercial:" id="nomCom" visible="true" width="465">
					<mx:Canvas>
						<mx:TextInput id="txtNomCom" width="290" restrict="A-Z;a-z;Ñ;ñ; "/>
					</mx:Canvas>
				</mx:FormItem>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:FormItem label="Teléfono 1:" id="tel1" visible="true">
					<mx:TextInput id="txtTel1"/>
				</mx:FormItem>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:FormItem label="Teléfono 2:" id="tel2" visible="true">
					<mx:TextInput id="txtTel2"/>
				</mx:FormItem>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:FormItem label="Correo 1:" id="email1" visible="true" width="465">
					<mx:TextInput id="txtEmail1" width="290"/>
				</mx:FormItem>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:FormItem label="Correo 2:" id="correo2" visible="true" width="465">
					<mx:TextInput id="txtEmail2" width="290"/>
				</mx:FormItem>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:FormItem label="Representante Legal:" id="repLegal" visible="true" width="485" height="50">
					<mx:Canvas>
						<mx:List id="lstRepLegal" width="220" height="50" labelField="nombre"/>	
						<mx:Button id="btnAgregarRepLegal" icon="@Embed(source='assets/add.png')" width="40" x="228" click="mostrarFormPers()" y="1"/>
						<mx:Button id="btnEliminarRepLegal" icon="@Embed(source='assets/delete-icon.png')" width="40" x="276" click="confirmarElimRepLegal()" y="1"/>
					</mx:Canvas>	
				</mx:FormItem>
			</mx:AddChild>
			<mx:SetProperty target="{nacionalidad}" name="width" value="370"/>
			<mx:RemoveChild target="{edoCivil}"/>
			<mx:RemoveChild target="{telefono}"/>
			<mx:RemoveChild target="{email}"/>
			<mx:SetProperty target="{fiel}" name="width" value="460"/>
		</mx:State>
	</mx:states>
	<mx:transitions>
		<mx:Transition fromState="*" toState="*">		
			<mx:Parallel>
				<mx:Fade duration="500" target="{this}"/>
			</mx:Parallel>
		</mx:Transition>
	</mx:transitions>
	
	<mx:Metadata>
		[Event(name="enviarDatosAcred", type="Data.EventAcred")]
	</mx:Metadata>
	
	<mx:Validator id="nombreV" source="{txtNombre}" property="text" 
	invalid="{txtNombre.setFocus()}" triggerEvent="" requiredFieldError="Nombre de Acreditado Requerido"/>
	
	<mx:Validator id="aPaternoV" source="{txtAP}" property="text" 
	invalid="{txtAP.setFocus()}" triggerEvent="" requiredFieldError="Apellido Paterno Requerido"/> 
	
	<mx:DateValidator id="valFec" property="text" inputFormat="dd/mm/yyyy" allowedFormatChars="/" 
	formatError="Formato de Fecha Incorrecto"/>
	
	<mx:Validator id="fechaV" source="{txtFecha}" property="text" 
	invalid="{txtFecha.setFocus()}" triggerEvent="" requiredFieldError="Fecha de Nacimiento Requerida"/>
	
	<mx:Validator id="rfcV" source="{txtRfc}" property="text" 
	invalid="{txtRfc.setFocus()}" triggerEvent="" requiredFieldError="RFC Requerido"/>
	
	<mx:Validator id="curpV" source="{txtCurp}" property="text" 
	invalid="{txtCurp.setFocus()}" triggerEvent="" requiredFieldError="CURP Requerida"/>
	
	<mx:Validator id="fielV" source="{txtCertFiel}" property="text" 
	invalid="{txtCertFiel.setFocus()}" triggerEvent="" requiredFieldError="Certificado Fiel Requerido"/>

	<mx:Script>
		<![CDATA[
			import Data.DatosPersona;
			import Data.EventPersona;
			import Data.Globales;
			import Data.Permisos;
			import Data.Utils;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.containers.TitleWindow;			
			import mx.effects.easing.Elastic;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;	
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.soap.WebService;
			import mx.rpc.xml.SimpleXMLDecoder;
			import mx.utils.ArrayUtil;
			import mx.utils.StringUtil;
			import mx.validators.Validator;
			import OPERAC.MttoBusqPersona;
			
			private var _xmlCoord:XML = new XML();
			private var _xmlDatos:XML = new XML();
			private var _xmlEntFed:XML = new XML();
			private var _xmlPais:XML = new XML();
			private var _xmlRepLegal:XML = new XML();
			
			public var figObj:ArrayCollection;
			public var edoCivilObj:ArrayCollection;
			public var coordObj:ArrayCollection;
			public var paisObj:ArrayCollection;
			public var entFedObj:ArrayCollection;
			public var persObj:ArrayCollection = new ArrayCollection();
			public var datos:DatosPersona = new DatosPersona();
			
			private var du:Utils;
			private var global:Globales;
			private var permiso:Permisos;
			private var codRepLegal:String;
			private var vResult:ValidationResultEvent;
			private var tipoAccion:int;
			public var bandCURP:Boolean;
			public var f:Date;
			public var fecMin:Date;
			public var fecMax:Date;
			
			public function asignaEstatus(tipoPersona:String):void{
				if(tipoPersona == "F"){
					currentState = "";
					this.height = 480;	
				}
				else if(tipoPersona == "M"){
					currentState = "moral";
					cboFigura.dataProvider = figObj;
					lstRepLegal.dataProvider = null;
				}
			}
			
			private function agregarPers(evt:Event):void{
				var oItem:Object = new Object();
				var comBusqPers:MttoBusqPersona = evt.currentTarget as MttoBusqPersona;
				
				oItem.codigo = comBusqPers.obtenerCodigo();	
				oItem.nombre = comBusqPers.obtenerNombre();
				
				persObj.addItem(oItem);
				persObj.refresh();
				
				lstRepLegal.dataProvider = persObj;
			}
			
			private function confirmarElimRepLegal():void{
				if(lstRepLegal.selectedIndex < 0){
					Alert.show("Debe seleccionar un registro.","Representante Legal",4,null,null,du.iAlert);
					return;
				}				
				Alert.show("¿Desea eliminar el registro seleccionado?","Representante Legal",3,null,eliminarRepLegal,du.iQuest,4);
			}
			
			private function eliminarRepLegal(evt:CloseEvent):void{
				if(evt.detail == Alert.YES){
					persObj.removeItemAt(lstRepLegal.selectedIndex);
					persObj.refresh();
					lstRepLegal.dataProvider = persObj;
				}
			}
			
			public function enviarDatosPersona(formData:DatosPersona):void{
				var invalidArray:Array;
				//Validacion de campos para Persona Fisica 
				if(currentState == null)
					invalidArray = Validator.validateAll([nombreV, aPaternoV, fechaV, rfcV, curpV]);
				//Validacion de campos para Persona Moral
				else if(currentState == "moral"){
					if(chkFiel.selected && txtCertFiel.text == "")
						invalidArray = Validator.validateAll([nombreV, fechaV, rfcV, fielV]);
					else
						invalidArray = Validator.validateAll([nombreV, fechaV, rfcV]);
				}
				if(invalidArray.length == 0){
					formData.codigo = txtCodigo.text;
					formData.nombre = StringUtil.trim(txtNombre.text.toUpperCase());
					formData.fecha = txtFecha.text;
					formData.rfc = txtRfc.text;
					//selecciona el codigo de la nacionalidad
					if (cboNac.selectedIndex > 0)
					 	formData.cdgNac = cboNac.selectedItem.CODIGO;
					formData.fiel = txtCertFiel.text;
					formData.arrRepLegal = obtieneRepLegal();
					
					if(currentState == null){	
						formData.segNombre = StringUtil.trim(txtSegNombre.text.toUpperCase());
						formData.aPaterno = StringUtil.trim(txtAP.text.toUpperCase());
						formData.aMaterno = StringUtil.trim(txtAM.text.toUpperCase());
						
						formData.sexo = sexo.selectedValue ? sexo.selectedValue.toString() : "";
						
						//selecciona el codigo del pais	
						if (cboPais.selectedIndex > 0)
							formData.cdgNacPais = cboPais.selectedItem.CODIGO;
						//selecciona el codigo de la entidad de nacimiento		
						if (cboEntidad.selectedIndex > 0)
							formData.cdgNacEntFed = cboEntidad.selectedItem.id;
					 						
						formData.curp = txtCurp.text;
						formData.ife = StringUtil.trim(txtIfe.text);
						formData.edoCivil = cboEdoCivil.selectedItem.codigo;
						formData.telefono = txtTel.text;
						formData.email1 = txtEmail.text;
					}
					else if(currentState == "moral"){
						formData.figura = cboFigura.selectedItem.codigo;
						formData.nomCom = txtNomCom.text;
						formData.telefono = txtTel1.text;
						formData.telefono2 = txtTel2.text;
						formData.email1 = txtEmail1.text;
						formData.email2 = txtEmail2.text;
					}
					
					formData.guardaDatos = true;
				}
				else
					formData.guardaDatos = false;
				var event:EventPersona = new EventPersona("enviarDatosPersona", formData);
				dispatchEvent(event);
			}
			
			private function formateaCoord():void{
				var cont:int = _xmlCoord.elements().length();
				var oItem:Object;
				var item:Array = new Array;
				
				oItem = new Object();
				oItem.id = "";	
				oItem.nombre = "--Seleccionar--";
				item.push(oItem);
				
				for (var i:int = 0; i < cont; i++){
					oItem = new Object();
					oItem.id = _xmlCoord.Table[i].CODIGO;	
					oItem.nombre = _xmlCoord.Table[i].NOMBRE;
					item.push(oItem);
				}
				coordObj = new ArrayCollection(item);
			}
			
			private function formatearEdoCivil():void{
				var oItem:Object;
				var item:Array = new Array;
				
				oItem = new Object();
				oItem.codigo = "0";	
				oItem.nombre = "--Seleccionar--";
				item.push(oItem);
				
				oItem = new Object();
				oItem.codigo = "C";	
				oItem.nombre = "Casado(a)";
				item.push(oItem);
				
				oItem = new Object();
				oItem.codigo = "D";	
				oItem.nombre = "Divorciado(a)";
				item.push(oItem);
				
				oItem = new Object();
				oItem.codigo = "S";	
				oItem.nombre = "Soltero(a)";
				item.push(oItem);
				
				oItem = new Object();
				oItem.codigo = "U";	
				oItem.nombre = "Unión Libre";
				item.push(oItem);
				
				oItem = new Object();
				oItem.codigo = "V";	
				oItem.nombre = "Viudo(a)";
				item.push(oItem);
					
				edoCivilObj = new ArrayCollection(item);
			}
			
			private function formateaEntFed():void{
				var cont:int = _xmlEntFed.elements().length();
				var oItem:Object;
				var item:Array = new Array;
				
				oItem = new Object();
				oItem.id = "0";	
				oItem.clave = "0";
				oItem.nombre = "--Seleccionar--";
				item.push(oItem);
				
				for (var i:int = 0; i < cont; i++){
					oItem = new Object();
					oItem.id = _xmlEntFed.Table[i].CODIGO;
					oItem.clave = _xmlEntFed.Table[i].CDGCURP;	
					oItem.nombre = _xmlEntFed.Table[i].NOMBRE;
					item.push(oItem);
				}
				entFedObj = new ArrayCollection(item);
			}
			
			private function formateaFigura():void{
				var oItem:Object;
				var item:Array = new Array;
				
				oItem = new Object();
				oItem.codigo = "0";	
				oItem.nombre = "--Seleccionar--";
				item.push(oItem);
				
				oItem = new Object();
				oItem.codigo = "1";	
				oItem.nombre = "SOFOM ENR";
				item.push(oItem);
				
				oItem = new Object();
				oItem.codigo = "2";	
				oItem.nombre = "SOFOM ER";
				item.push(oItem);
				
				oItem = new Object();
				oItem.codigo = "3";	
				oItem.nombre = "SA de CV";
				item.push(oItem);
				
				oItem = new Object();
				oItem.codigo = "4";	
				oItem.nombre = "SAPI de CV";
				item.push(oItem);
					
				figObj = new ArrayCollection(item);
			}
			
			private function formateaPais(cadInfo:String):void{
				var oItem:Object;
				var array:Array;
				
				oItem = new Object();
				oItem.CODIGO = "0";	
				oItem.NOMBRE = "--Seleccionar--";
				oItem.GENTILICIO = "--Seleccionar--";
				
				var xml:XMLDocument = new XMLDocument(cadInfo); 
     			var decoder:SimpleXMLDecoder = new SimpleXMLDecoder();  
     			var data:Object = decoder.decodeXML(xml);  
				array = ArrayUtil.toArray(data.NewDataSet.Table);   
				paisObj = new ArrayCollection(array);
				paisObj.addItemAt(oItem, 0);
			}
			
			private function formateaRepLegal():void{
				var cont:int = _xmlRepLegal.elements().length();
				var oItem:Object;
				var item:Array = new Array;
				
				for (var i:int = 0; i < cont; i++){
					oItem = new Object();
					oItem.codigo = _xmlRepLegal.Table[i].CODIGO;
					oItem.nombre = _xmlRepLegal.Table[i].NOMBRE;
					item.push(oItem);
				}
				persObj = new ArrayCollection(item);
			}
			
			private function generaCURP():void{
				if(currentState == null && tipoAccion == 1){
					//Elimina espacios al principio y final de los textos 
					txtAP.text = StringUtil.trim(txtAP.text);
					txtAM.text = StringUtil.trim(txtAM.text);
					txtNombre.text = StringUtil.trim(txtNombre.text);
					txtSegNombre.text = StringUtil.trim(txtSegNombre.text);
					
					if (txtAP.text != "" && txtNombre.text != "" && txtFecha.text != "" 
					&& (rdbMasculino.selected == true || rdbFemenino.selected == true) && cboEntidad.selectedIndex > 0){
						var wsCat:WebService = new WebService;
						var params:Array = new Array;
						var curp:String;
						var nombres:String;
						var valSexo:String;
						var clave:String;
						
						du.initWsCat(wsCat);					
						du.sCursor();
						
						nombres = txtNombre.text + " " + txtSegNombre.text;
						
						valSexo = sexo.selectedValue ? sexo.selectedValue.toString() : "";
						
						for(var j:int = 0; j < entFedObj.length; j++){
							if (entFedObj[j].nombre.toString() == cboEntidad.text){
								clave = entFedObj[j].clave.toString();
								break;			
							}			
						}
							
						du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
							curp = evt.result.toString();
	
							du.rCursor();
							du.closeWs(wsCat);
							
							txtRfc.text = curp.substr(0,10);
							txtCurp.text = curp;	
						});
						//GENERA EL CURP DEL CLIENTE
						params[0] = txtAP.text;
						params[1] = txtAM.text;
						params[2] = nombres;
						params[3] = txtFecha.text;
						params[4] = valSexo;
						params[5] = clave;
						wsCat.getInfoAcred.send(2, params);
					}
					else{
						txtRfc.text = "";
						txtCurp.text = "";
					}	
				}
			}
			
			public function init(info:DatosPersona, estatus:String):void{
				var wsCat:WebService = new WebService;
				var params:Array = new Array;
				
				du = new Utils();
				global = new Globales();
				permiso = new Permisos();
				
				currentState = estatus;
				
				f = global.obtenerFechaSistema();
				tipoAccion = 1;
				
				//Codigo encargado de limitar la fecha de nacimiento del cliente
				/*fecMin = new Date(f.getFullYear()-17,f.getMonth(),f.getDate());
				fecMax = new Date(f.getFullYear()-80,f.getMonth(),f.getDate());
				txtFecha.selectableRange = {rangeStart: fecMax, rangeEnd: fecMin};*/
				
				permisos();
				
				du.initWsCat(wsCat);
				du.sCursor();
					
				du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
					_xmlPais = new XML(evt.result.toString());
					
					if (_xmlPais.elements().length() > 0){
						formateaPais(evt.result.toString());
						cboPais.dataProvider = paisObj;
						cboNac.dataProvider = paisObj;
					}
					
					du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
						_xmlEntFed = new XML(evt.result.toString());
						
						du.rCursor();
						du.closeWs(wsCat);
						
						if (_xmlEntFed.elements().length() > 0){
							formateaEntFed();
							cboEntidad.dataProvider = entFedObj;
						}		
						
						formatearEdoCivil();
						formateaFigura();
						
						if(currentState == null){
							cboEdoCivil.dataProvider = edoCivilObj;
						}
						else if(currentState == "moral"){
							//Asigna el objeto de figura
							cboFigura.dataProvider = figObj;
							lstRepLegal.dataProvider = null;
						}
						
						if (info != null){
							var j:int;
							tipoAccion = 2;
							txtCodigo.text = info.codigo;
							txtNombre.text = info.nombre;
							txtSegNombre.text = info.segNombre;
							txtAP.text = info.aPaterno;
							txtAM.text = info.aMaterno;
							
							if(info.fiel != ""){
								chkFiel.selected = true;
								txtCertFiel.text = info.fiel;
								modificarFiel();	
							}
							
							if(currentState == null){
								for(j = 0; j < edoCivilObj.length; j++){
									if (edoCivilObj[j].codigo.toString() == info.edoCivil){
										cboEdoCivil.selectedIndex = j;
										break;
									}
								}	
								txtTel.text = info.telefono;
								txtEmail.text = info.email1;
							}
							//Informacion relacionada con el representante legal
							else if(currentState == "moral"){
								du.initWsCat(wsCat);
								du.sCursor();
								
								du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
									_xmlRepLegal = new XML(evt.result.toString());
									
									du.rCursor();
									du.closeWs(wsCat);
								
									//carga info de los representantes legales
									formateaRepLegal();
									lstRepLegal.dataProvider = persObj; 
								});
								//CONSULTA EL LISTADO DE REP LEGALES
								params[0] = info.codigo;
								params[1] = "RL"
								wsCat.getInfoRegistro.send(45, params);
									
								for(j = 0; j < figObj.length; j++){
									if (figObj[j].codigo.toString() == info.figura){
										cboFigura.selectedIndex = j;
										break;
									}
								}
								
								txtNomCom.text = info.nomCom;
								txtTel1.text = info.telefono;
								txtTel2.text = info.telefono2;
								txtEmail1.text = info.email1;
								txtEmail2.text = info.email2;
							}
							if(info.sexo != null){
								sexo.selectedValue = info.sexo;
							}
							txtFecha.text = info.fecha;
							//selecciona el pais del acreditado
							for(j = 0; j < paisObj.length; j++){   
								if (paisObj[j].CODIGO.toString() == info.cdgNacPais){
									cboPais.selectedIndex = j;
									break;
								}
							}
							//selecciona la entidad federativa del acreditado
							for(j = 0; j < entFedObj.length; j++){   
								if (entFedObj[j].id.toString() == info.cdgNacEntFed){
									cboEntidad.selectedIndex = j;
									break;
								}
							} 
							//selecciona la nacionalidad del acreditado
							for(j = 0; j < paisObj.length; j++){   
								if (paisObj[j].CODIGO.toString() == info.cdgNac){
									cboNac.selectedIndex = j;
									break;
								}
							}
							txtRfc.text = info.rfc;
							txtCurp.text = info.curp;
							txtIfe.text = info.ife;
						}		
						/*else{
							for(j = 0; j < paisObj.length; j++){   
								if (paisObj[j].NOMBRE.toString().toUpperCase() == "MEXICO"){
									cboPais.selectedIndex = j;
									break;
								}
							}
							for(j = 0; j < paisObj.length; j++){   
								if (paisObj[j].GENTILICIO.toString().toUpperCase() == "MEXICANO"){
									cboNac.selectedIndex = j;
									break;
								}
							}
						}*/
					});
					//MUESTRA LAS ENTIDADES FEDERATIVAS DISPONIBLES
					wsCat.getCatalogoGral.send(2);	
				});
				//CONSULTA LOS PAISES DISPONIBLES
				wsCat.getCatalogoGral.send(1);
			}
			
			private function modificarFiel():void{
				if(chkFiel.selected)
					txtCertFiel.editable = true;
				else{
					txtCertFiel.text = "";
					txtCertFiel.editable = false;
				}
			}
			
			private function modificarFecha():void{
				vResult = valFec.validate(txtFecha.text);
                if (vResult.type != ValidationResultEvent.VALID)
                    txtFecha.text = "";
				else
					generaCURP();
			}
			
			private function mostrarFormPers():void{
				var comBusqPers:MttoBusqPersona = new MttoBusqPersona;
				comBusqPers = MttoBusqPersona(PopUpManager.createPopUp(this,MttoBusqPersona,true));
				comBusqPers.addEventListener("enviar", agregarPers); 
				PopUpManager.centerPopUp(comBusqPers);
			}
			
			private function obtieneRepLegal():Array{
				var arrRepLegal:Array = new Array;
				
				if(currentState == "moral"){
					var lista:ArrayCollection = persObj;
					var cont:int = lista.length;
					
					if(cont > 0)
						for(var i:int = 0; i < cont; i++)
							arrRepLegal[i] = lista[i].codigo;
					else
						arrRepLegal[0] = "";
				}
				else if(currentState == null)
					arrRepLegal[0] = "";
					
				return arrRepLegal;
			}
			
			public function permisos():void{
				if(permiso.permisosModAcred(Application.application.PERFIL_ID)){
					txtRfc.editable = true;
					txtCurp.editable = true;
				}
			}
	]]>
	</mx:Script>
	<mx:FormItem label="Código:" id="codigo" visible="true">
		<mx:TextInput id="txtCodigo" maxChars="12" editable="false" width="129"/>
	</mx:FormItem>
	<mx:FormItem label="Nombres:" id="nombre" visible="true" width="384">
		<mx:Canvas>
			<mx:TextInput id="txtNombre" width="129" restrict="A-Z;a-z;Ñ;ñ; " focusOut="generaCURP()"/>
			<mx:TextInput id="txtSegNombre" x="127" width="137" restrict="A-Z;a-z;Ñ;ñ; " focusOut="generaCURP()"/>	
		</mx:Canvas>
	</mx:FormItem>
	<mx:FormItem label="Apellido Paterno:" id="AP" visible="true">
		<mx:TextInput id="txtAP" restrict="A-Z;a-z;Ñ;ñ; " focusOut="generaCURP()"/>
	</mx:FormItem>
	<mx:FormItem label="Apellido Materno:" id="AM" visible="true">
		<mx:TextInput id="txtAM" restrict="A-Z;a-z;Ñ;ñ; " focusOut="generaCURP()"/>
	</mx:FormItem>
	<mx:FormItem label="Genero:" id="genero" visible="true" width="330">
		<mx:Canvas>
			<mx:RadioButtonGroup id="sexo"/>
			<mx:RadioButton id="rdbFemenino" label="Femenino" value="F" groupName="sexo" focusOut="generaCURP()"/>
			<mx:RadioButton id="rdbMasculino" label="Masculino" value="M" groupName="sexo" x="80" focusOut="generaCURP()"/>	
		</mx:Canvas>	
	</mx:FormItem>
	<mx:FormItem label="Fecha Nacimiento:" id="fecha" visible="true" width="350">
		<mx:Canvas id="cnvFecha" width="250">
			<mx:DateField id="txtFecha" width="109" yearNavigationEnabled="true" focusOut="modificarFecha()" editable="true"/>
			<mx:Label id="formatoFecha" text="(DD/MM/AAAA)" x="117" y="2"/>
		</mx:Canvas>
	</mx:FormItem>
	<mx:FormItem label="País Nacimiento:" id="pais" visible="true" width="290">
		<mx:ComboBox id="cboPais" labelField="NOMBRE" width="170"/>
	</mx:FormItem>
	<mx:FormItem label="Entidad Nacimiento:" id="entidad" visible="true" width="290">
		<mx:ComboBox id="cboEntidad" labelField="nombre" width="170" focusOut="generaCURP()"/>
	</mx:FormItem>
	<mx:FormItem label="Nacionalidad:" id="nacionalidad" visible="true" width="290">
		<mx:ComboBox id="cboNac" labelField="GENTILICIO" width="170"/>
	</mx:FormItem>
	<mx:FormItem label="RFC:" id="rfc" visible="true">
		<mx:TextInput id="txtRfc" focusIn="generaCURP()" editable="false"/>
	</mx:FormItem>
	<mx:FormItem label="CURP:" id="curp" visible="true">
		<mx:TextInput id="txtCurp" focusIn="generaCURP()" editable="false"/>
	</mx:FormItem>
	<mx:FormItem label="IFE:" id="ife" visible="true">
		<mx:TextInput id="txtIfe" restrict="0-9" maxChars="15"/>
	</mx:FormItem>
	<mx:FormItem label="Fiel:" id="fiel" visible="true" width="380">
		<mx:Canvas>
			<mx:CheckBox id="chkFiel" click="modificarFiel()"/>
			<mx:TextInput id="txtCertFiel" x="25" width="190" restrict="A-Z;a-z;Ñ;ñ;0-9; " editable="false"/>
		</mx:Canvas>
	</mx:FormItem>
	<mx:FormItem label="Estado Civil:" id="edoCivil" visible="true" width="290">
		<mx:Canvas>
			<mx:ComboBox id="cboEdoCivil" labelField="nombre" width="170"/>
		</mx:Canvas>	
	</mx:FormItem>
	<mx:FormItem label="Teléfono:" id="telefono" visible="true">
		<mx:TextInput id="txtTel" restrict="0-9" maxChars="15"/>
	</mx:FormItem>
	<mx:FormItem label="Email:" id="email" visible="true">
		<mx:TextInput id="txtEmail" maxChars="100"/>
	</mx:FormItem>
</mx:Form>