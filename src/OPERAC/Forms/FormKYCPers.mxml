<?xml version="1.0" encoding="utf-8"?>
<mx:Form xmlns:mx="http://www.adobe.com/2006/mxml" width="490" height="300" 
	creationPolicy="all" xmlns:Data="Data.*">
	<mx:states>
		<mx:State name="moral">
			<mx:RemoveChild target="{pep}"/>
		</mx:State>
	</mx:states>
	<mx:Metadata>
		[Event(name="enviarDatosPersona", type="Data.EventPersona")]
	</mx:Metadata>
	
	<mx:Validator id="giroV" source="{txtGiro}" property="text" 
	invalid="{txtGiro.setFocus()}" triggerEvent="" requiredFieldError="Giro Requerido"/>

	<mx:NumberValidator id="origenV" source="{cboOrigen}" property="selectedIndex" 
	minValue="1" triggerEvent="" lowerThanMinError="Origen de Recursos Requerido"/>
	
	<mx:NumberValidator id="destinoV" source="{cboDestino}" property="selectedIndex" 
	minValue="1" triggerEvent="" lowerThanMinError="Destino de Recursos Requerido"/>

	<mx:Script>
		<![CDATA[
			import Data.DatosPersona;
			import Data.EventPersona;
			import Data.Globales;
			import Data.Utils;
			import mx.controls.Alert;
			import mx.validators.Validator;
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.containers.TitleWindow;			
			import mx.managers.PopUpManager;
			import mx.effects.easing.Elastic;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.soap.WebService;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.validators.Validator;
			import OPERAC.MttoBusqPersona;	
			
			private var _xmlDestino:XML =  new XML();
			private var _xmlOrigen:XML =  new XML();
			private var _xmlTipoPers:XML =  new XML();
			private var _xmlPropReal:XML =  new XML();
			private var _xmlProvRec:XML =  new XML();
			
			private var origenObj:ArrayCollection = new ArrayCollection();
			private var destinoObj:ArrayCollection = new ArrayCollection();
			private var giroObj:ArrayCollection = new ArrayCollection();
			public var provRecObj:ArrayCollection = new ArrayCollection();
			public var propRealObj:ArrayCollection = new ArrayCollection();
			public var datos:DatosPersona = new DatosPersona();
			
			private var du:Utils;
			private var global:Globales;
			private var vResult:ValidationResultEvent;
			private var codPropReal:String;
			private var codProvRec:String;
			
			private function agregarPropReal(evt:Event):void{
				var oItem:Object = new Object();
				var comBusqPers:MttoBusqPersona = evt.currentTarget as MttoBusqPersona;
				
				oItem.codigo = comBusqPers.obtenerCodigo();	
				oItem.nombre = comBusqPers.obtenerNombre();
				
				propRealObj.addItem(oItem);
				propRealObj.refresh();
				
				lstPropReal.dataProvider = propRealObj;
			}
			
			private function agregarProvRec(evt:Event):void{
				var oItem:Object = new Object();
				var comBusqPers:MttoBusqPersona = evt.currentTarget as MttoBusqPersona;
				
				oItem.codigo = comBusqPers.obtenerCodigo();	
				oItem.nombre = comBusqPers.obtenerNombre();
				
				provRecObj.addItem(oItem);
				provRecObj.refresh();
				
				lstProvRec.dataProvider = provRecObj;
			}
			
			public function asignaEstatus(tipoPersona:String):void{
				if(tipoPersona == "F")
					currentState = "";
				else if(tipoPersona == "M")
					currentState = "moral";
			}
			
			private function confirmarElimPropReal():void{
				var titulo:String = "Propietario Real";
				if(lstPropReal.selectedIndex < 0){
					Alert.show("Debe seleccionar un registro.",titulo,4,null,null,du.iAlert);
					return;
				}				
				Alert.show("¿Desea eliminar el registro seleccionado?",titulo,3,null,eliminarPropReal,du.iQuest,4);
			}
			
			private function confirmarElimProvRec():void{
				var titulo:String = "Proveedor de Recursos";
				if(lstProvRec.selectedIndex < 0){
					Alert.show("Debe seleccionar un registro.",titulo,4,null,null,du.iAlert);
					return;
				}				
				Alert.show("¿Desea eliminar el registro seleccionado?",titulo,3,null,eliminarProvRec,du.iQuest,4);
			}
			
			private function eliminarPropReal(evt:CloseEvent):void{
				if(evt.detail == Alert.YES){
					propRealObj.removeItemAt(lstPropReal.selectedIndex);
					propRealObj.refresh();
					lstPropReal.dataProvider = propRealObj;
				}
			}
			
			private function eliminarProvRec(evt:CloseEvent):void{
				if(evt.detail == Alert.YES){
					provRecObj.removeItemAt(lstProvRec.selectedIndex);
					provRecObj.refresh();
					lstProvRec.dataProvider = provRecObj;
				}
			}
			
			public function enviarDatosPersona(formData:DatosPersona):void{
				if(validar()){
					formData.giro = txtGiro.text;
					formData.origen = cboOrigen.selectedItem.id;
					formData.destino = cboDestino.selectedItem.id;
					formData.otroDesRec = txtOtroDesRec.text;
					
					formData.arrProvRec = obtieneProvRec();
					formData.arrPropReal = obtienePropReal();
					
					if(currentState == null)
						formData.pep = chkPep.selected ? "S":"N";
					
					formData.guardaKYC = true;
				}
				else
					formData.guardaKYC = false;	
				
				var event:EventPersona = new EventPersona("enviarDatosPersona", formData);
				dispatchEvent(event);
			}
			
			private function formateaDestino():void{
				var cont:int = _xmlDestino.elements().length();
				var oItem:Object;
				var item:Array = new Array();
				
				oItem = new Object();
				oItem.id = "0";	
				oItem.nombre = "--Seleccionar--";
				item.push(oItem);
				
				for (var i:int = 0; i < cont; i++){
					oItem = new Object();
					oItem.id = _xmlDestino.Table[i].CODIGO;	
					oItem.nombre = _xmlDestino.Table[i].DESCRIPCION;
					item.push(oItem);
				}
				destinoObj = new ArrayCollection(item);
			}
			
			private function formateaOrigen():void{
				var cont:int = _xmlOrigen.elements().length();
				var oItem:Object;
				var item:Array = new Array();
				
				oItem = new Object();
				oItem.id = "0";	
				oItem.nombre = "--Seleccionar--";
				item.push(oItem);
				
				for (var i:int = 0; i < cont; i++){
					oItem = new Object();
					oItem.id = _xmlOrigen.Table[i].CODIGO;	
					oItem.nombre = _xmlOrigen.Table[i].DESCRIPCION;
					item.push(oItem);
				}
				origenObj = new ArrayCollection(item);
			}
			
			private function formateaGiro():void{
				var oItem:Object;
				var item:Array = new Array();
				
				oItem = new Object();
				oItem.id = "0";	
				oItem.nombre = "--Seleccionar--";
				item.push(oItem);
				
				oItem = new Object();
				oItem.id = "1";	
				oItem.nombre = "Servicios Financieros";
				item.push(oItem);
				
				oItem = new Object();
				oItem.id = "2";	
				oItem.nombre = "Comercialización de Bienes";
				item.push(oItem);
				
				oItem = new Object();
				oItem.id = "3";	
				oItem.nombre = "Manufactura";
				item.push(oItem);
				
				oItem = new Object();
				oItem.id = "4";	
				oItem.nombre = "Construcción";
				item.push(oItem);
				
				oItem = new Object();
				oItem.id = "5";	
				oItem.nombre = "Explotación de Recursos Naturales";
				item.push(oItem);
				
				giroObj = new ArrayCollection(item);
			}
			
			private function formateaPropReal():void{
				var cont:int = _xmlPropReal.elements().length();
				var oItem:Object;
				var item:Array = new Array;
				
				for (var i:int = 0; i < cont; i++){
					oItem = new Object();
					oItem.codigo = _xmlPropReal.Table[i].CODIGO;
					oItem.nombre = _xmlPropReal.Table[i].NOMBRE;
					item.push(oItem);
				}
				propRealObj = new ArrayCollection(item);
			}
			
			private function formateaProvRec():void{
				var cont:int = _xmlProvRec.elements().length();
				var oItem:Object;
				var item:Array = new Array;
				
				for (var i:int = 0; i < cont; i++){
					oItem = new Object();
					oItem.codigo = _xmlProvRec.Table[i].CODIGO;
					oItem.nombre = _xmlProvRec.Table[i].NOMBRE;
					item.push(oItem);
				}
				provRecObj = new ArrayCollection(item);
			}
			
			public function init(info:DatosPersona, estatus:String):void{
				var wsCat:WebService = new WebService;
				var params:Array = new Array;
				var i:int;
				
				du = new Utils();
				global = new Globales();
				
				currentState = estatus;
				
				permisos();
				
				du.initWsCat(wsCat);
				du.sCursor();
					
				du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
					_xmlTipoPers = new XML(evt.result.toString());
						
					du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
						_xmlOrigen = new XML(evt.result.toString());
						
						du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
							_xmlDestino = new XML(evt.result.toString());
					
							du.rCursor();
							du.closeWs(wsCat);
							
							if (_xmlOrigen.elements().length() > 0){
								formateaOrigen();
								cboOrigen.dataProvider = origenObj;
							}
							
							if (_xmlDestino.elements().length() > 0){
								formateaDestino();
								cboDestino.dataProvider = destinoObj;
							}
							
							lstPropReal.dataProvider = null;
							lstProvRec.dataProvider = null;
							
							if (info != null){
								txtGiro.text = info.giro;
								
								for(i = 0; i < origenObj.length; i++){
									if (origenObj[i].id == info.origen){
										cboOrigen.selectedIndex = i;
										break;
									}
								}
								
								for(i = 0; i < destinoObj.length; i++){
									if (destinoObj[i].id == info.destino){
										cboDestino.selectedIndex = i;
										break;
									}
								}
								txtOtroDesRec.text = info.otroDesRec;
								
								if(currentState == null){
									if(info.pep == "S")
										chkPep.selected = true;
								}	
								
								du.initWsCat(wsCat);
								du.sCursor();
								
								du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
									_xmlProvRec = new XML(evt.result.toString());
									
									//carga info de los representantes legales
									formateaProvRec();
									lstProvRec.dataProvider = provRecObj; 
									
									du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
										_xmlPropReal = new XML(evt.result.toString());
										
										du.rCursor();
										du.closeWs(wsCat);
										
										//carga info de los propietarios reales
										formateaPropReal();
										lstPropReal.dataProvider = propRealObj;
									});
									//CONSULTA EL LISTADO DE PROPIETARIOS REALES
									params[0] = info.codigo;
									params[1] = "PR"
									wsCat.getInfoRegistro.send(45, params); 
								});
								//CONSULTA EL LISTADO DE PROVEEDORES DE RECURSOS
								params[0] = info.codigo;
								params[1] = "VR";
								wsCat.getInfoRegistro.send(45, params);	
							}
						});
						//Obtiene informacion de Destino de los recursos de la actividad
						wsCat.getCatalogoGral.send(37);
					});
					//Obtiene informacion de Origen de los recursos de la actividad
					wsCat.getCatalogoGral.send(36);
				});
				//Obtiene informacion de los Tipos de Persona 
				wsCat.getCatalogoGral.send(35);
			}
			
			private function mostrarFormPers(tipo:int):void{
				var comBusqPers:MttoBusqPersona = new MttoBusqPersona;
				comBusqPers = MttoBusqPersona(PopUpManager.createPopUp(this,MttoBusqPersona,true));
				if(tipo == 1)
					comBusqPers.addEventListener("enviar", agregarProvRec);
				else if(tipo == 2)
				 	comBusqPers.addEventListener("enviar", agregarPropReal);
				PopUpManager.centerPopUp(comBusqPers);
			}
			
			private function obtienePropReal():Array{
				var arrPropReal:Array = new Array;
				var lista:ArrayCollection = propRealObj;
				var cont:int = lista.length;
				
				if(cont > 0)
					for(var i:int = 0; i < cont; i++)
						arrPropReal[i] = lista[i].codigo;
				else
					arrPropReal[0] = "";
					
				return arrPropReal;
			}
			
			private function obtieneProvRec():Array{
				var arrProvRec:Array = new Array;
				var lista:ArrayCollection = provRecObj;
				var cont:int = lista.length;
				
				if(cont > 0)
					for(var i:int = 0; i < cont; i++)
						arrProvRec[i] = lista[i].codigo;
				else
					arrProvRec[0] = "";
					
				return arrProvRec;
			}
			
			private function permisos():void{
				var perfil_id:String = global.obtenerCadPerfil();
				var cont:int;
			}
		
			private function validar():Boolean{
				var invalidArray:Array = Validator.validateAll([giroV, origenV, destinoV]);
				
				if(invalidArray.length > 0)
					return false;	
				return true;
			}
	]]>
	</mx:Script>
	
	<mx:FormItem label="Giro, actividad u objeto*:" id="giro" visible="true" width="440">
		<mx:TextInput id="txtGiro" width="295"/>
	</mx:FormItem>
	<mx:FormItem label="Origen de Recursos*:" id="origen" visible="true" width="440">
		<Data:CustomComboBox id="cboOrigen" labelField="nombre" width="295"/>
	</mx:FormItem>
	<mx:FormItem label="Proveedor Recursos:" id="provRec" visible="true" width="460" height="50">
		<mx:Canvas>
			<mx:List id="lstProvRec" width="220" height="50" labelField="nombre"/>	
			<mx:Button id="btnAgregarProvRec" icon="@Embed(source='assets/add.png')" width="40" x="228" click="mostrarFormPers(1)" y="1"/>
			<mx:Button id="btnEliminarProvRec" icon="@Embed(source='assets/delete-icon.png')" width="40" x="276" click="confirmarElimProvRec()" y="1"/>
		</mx:Canvas>	
	</mx:FormItem>
	<mx:FormItem label="Destino de Recursos*:" id="destino" visible="true" width="440">
		<Data:CustomComboBox id="cboDestino" labelField="nombre" width="295"/>
	</mx:FormItem>
	<mx:FormItem label="Otro:" id="otroDesRec" visible="true" width="420">
		<mx:TextInput id="txtOtroDesRec" width="232"/>
	</mx:FormItem>
	<mx:FormItem id="pep">
		<mx:CheckBox id="chkPep" label="Persona Políticamente Expuesta (PEP)"/>
	</mx:FormItem>
	<mx:FormItem label="Propietario Real:" id="propReal" visible="true" width="460" height="50">
		<mx:Canvas>
			<mx:List id="lstPropReal" width="220" height="50" labelField="nombre"/>	
			<mx:Button id="btnAgregarPropReal" icon="@Embed(source='assets/add.png')" width="40" x="228" click="mostrarFormPers(2)" y="1"/>
			<mx:Button id="btnEliminarPropReal" icon="@Embed(source='assets/delete-icon.png')" width="40" x="276" click="confirmarElimPropReal()" y="1"/>
		</mx:Canvas>	
	</mx:FormItem>
</mx:Form>